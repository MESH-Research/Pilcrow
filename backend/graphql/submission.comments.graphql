extend type Submission {
    inline_comments: [InlineComment!]!
        @hasMany(relation: "inlineComments")
        @softDeletes
    overall_comments: [OverallComment!]!
        @hasMany(relation: "overallComments")
        @softDeletes
}

"""
An inline comment of a submission
"""
type InlineComment implements Comment {
    id: ID!
    content: String!
    created_by: User! @belongsTo(relation: "createdBy")
    updated_by: User! @belongsTo(relation: "updatedBy")
    created_at: DateTimeUtc!
    updated_at: DateTimeUtc!
    deleted_at: DateTimeUtc
    replies: [InlineCommentReply!] @hasMany @softDeletes
    style_criteria: [InlineCommentStyleCriteria!]
    read_at: DateTimeUtc @rename(attribute: "readAt")
    from: Int
    to: Int
}

"""
The static style criteria of an inline comment
"""
type InlineCommentStyleCriteria {
    id: ID
    name: String
    icon: String
}

"""
A reply to an inline comment of a submission
"""
type InlineCommentReply implements Comment {
    id: ID!
    content: String!
    created_by: User! @belongsTo(relation: "createdBy")
    updated_by: User! @belongsTo(relation: "updatedBy")
    created_at: DateTimeUtc!
    updated_at: DateTimeUtc!
    deleted_at: DateTimeUtc
    parent_id: ID!
    reply_to_id: ID!
    read_at: DateTimeUtc @rename(attribute: "readAt")
}

"""
An overall comment of a submission
"""
type OverallComment implements Comment {
    id: ID!
    content: String!
    created_by: User! @belongsTo(relation: "createdBy")
    created_at: DateTimeUtc!
    updated_by: User! @belongsTo(relation: "updatedBy")
    updated_at: DateTimeUtc!
    deleted_at: DateTimeUtc
    replies: [OverallCommentReply!] @hasMany @softDeletes
    read_at: DateTimeUtc @rename(attribute: "readAt")
}

"""
A reply to an overall comment of a submission
"""
type OverallCommentReply implements Comment {
    id: ID!
    content: String!
    created_by: User! @belongsTo(relation: "createdBy")
    updated_by: User! @belongsTo(relation: "updatedBy")
    created_at: DateTimeUtc!
    updated_at: DateTimeUtc!
    deleted_at: DateTimeUtc
    parent_id: ID!
    reply_to_id: ID!
    read_at: DateTimeUtc @rename(attribute: "readAt")
}

extend input UpdateSubmissionInput {
    inline_comments: InlineCommentHasManyInput
        @rename(attribute: "inlineComments")
    overall_comments: OverallCommentHasManyInput
        @rename(attribute: "overallComments")
}

input InlineCommentHasManyInput {
    create: [CreateInlineCommentInput!]
        @rules(
            apply: [
                "App\\Rules\\SubmissionIsReviewable"
                "App\\Rules\\InlineCommentIdValidity"
            ]
        )
    update: [UpdateInlineCommentInput!]
}

input CreateInlineCommentInput {
    content: String!
    style_criteria: [ID!] @transformStyleCriteriaIds
    from: Int
    to: Int
    parent_id: ID
    reply_to_id: ID
}

input UpdateInlineCommentInput {
    id: ID!
    content: String
    style_criteria: [ID!] @transformStyleCriteriaIds
    from: Int
    to: Int
}

input OverallCommentHasManyInput {
    create: [CreateOverallCommentInput!]
        @rules(
            apply: [
                "App\\Rules\\OverallCommentIdValidity"
                "App\\Rules\\SubmissionIsReviewable"
            ]
        )
    update: [UpdateOverallCommentInput!]
}

input CreateOverallCommentInput {
    content: String!
    parent_id: ID
    reply_to_id: ID
}

input UpdateOverallCommentInput {
    id: ID!
    content: String
}

interface Comment {
    id: ID!
    content: String!
    created_by: User!
    updated_by: User!
    created_at: DateTimeUtc!
    updated_at: DateTimeUtc!
    deleted_at: DateTimeUtc
    read_at: DateTimeUtc @rename(attribute: "readAt")
}

extend type Mutation @guard {
    markInlineCommentsRead(
        input: MarkInlineCommentsReadInput!
    ): [InlineComment]!
        @field(
            resolver: "App\\GraphQL\\Mutations\\CommentStatusMutator@inlineRead"
        )
    markInlineCommentRepliesRead(
        input: MarkInlineCommentsReadInput!
    ): [InlineCommentReply]!
        @field(
            resolver: "App\\GraphQL\\Mutations\\CommentStatusMutator@inlineRead"
        )
    markOverallCommentsRead(
        input: MarkOverallCommentsReadInput!
    ): [OverallComment]!
        @field(
            resolver: "App\\GraphQL\\Mutations\\CommentStatusMutator@overallRead"
        )
    markOverallCommentRepliesRead(
        input: MarkOverallCommentsReadInput!
    ): [OverallCommentReply]!
        @field(
            resolver: "App\\GraphQL\\Mutations\\CommentStatusMutator@overallRead"
        )
}

input MarkInlineCommentsReadInput {
    submission_id: ID!
    comment_ids: [ID!]!
}

input MarkOverallCommentsReadInput {
    submission_id: ID!
    comment_ids: [ID!]!
}
