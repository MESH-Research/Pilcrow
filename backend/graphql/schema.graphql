#import academic_profiles.graphql
#import notification.graphql
#import permission.graphql
#import profile_metadata.graphql
#import publication.graphql
#import social_media.graphql
#import submission.graphql
#import role.graphql
#import user.graphql
#import settings.graphql
#import audit.graphql
#import oauth.graphql
#import features/*.graphql

type Query {
    "Return information about the currently logged in user"
    currentUser: User @auth

    "Return details about a specific user in the application"
    user(id: ID @eq): User @find

    "Return user accounts optionally based on a supplied search term"
    userSearch(term: String @search): [User!]! @paginate(defaultCount: 10)

    "Validate details of a new user.  Returns true if supplied user fields would be valid."
    validateNewUser(user: ValidateNewUserInput): Boolean @returnTrue

    "Return pre-defined user roles in the application"
    role(id: ID @eq): Role @find

    "Return a permission by ID"
    permission(id: ID @eq): Permission @find

    versionInfo: VersionInfo
}

type VersionInfo {
    version: String
    version_url: String
    version_date: String
}

type Mutation {
    "Log in to a new session and get the user."
    login(email: String!, password: String!): User!

    "Log out from the current session, showing the user one last time."
    logout: User @guard

    "Create a new user"
    createUser(user: CreateUserInput! @spread): User!
        @create
        @event(dispatch: "Illuminate\\Auth\\Events\\Registered")

    "Update user information"
    updateUser(user: UpdateUserInput! @spread): User!
        @update
        @can(ability: "update", find: "id")

    "(Re)send a verification email to a user.  "
    sendEmailVerification(
        "User to resend verification for. If not supplied, defaults to the current user."
        id: ID
    ): User!
        @guard
        @field(resolver: "App\\GraphQL\\Mutations\\VerifyEmail@send")

    "Verify the currently logged in user's email address"
    verifyEmail(
        "Token supplied to the user via email"
        token: String!

        "Token expiration as a UNIX epoch timestamp"
        expires: String!
    ): User!
        @guard
        @field(resolver: "App\\GraphQL\\Mutations\\VerifyEmail@verify")

    "Mark a user notification as read"
    markNotificationRead(id: ID!): Notification!
        @field(
            resolver: "App\\GraphQL\\Mutations\\MarkNotificationRead@markAsRead"
        )

    "Mark all of a user's notification as read"
    markAllNotificationsRead: Int
        @field(
            resolver: "App\\GraphQL\\Mutations\\MarkNotificationRead@markAllAsRead"
        )

    "Send a password reset email to a specified email address"
    requestPasswordReset(email: String!): Boolean
        @field(resolver: "App\\GraphQL\\Mutations\\ResetPassword@request")

    "Update a password from a password reset request"
    resetPassword(input: ResetPasswordInput): User
        @field(resolver: "App\\GraphQL\\Mutations\\ResetPassword@reset")
}

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

scalar DateTimeUtc
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTimeUtc")

"Can be used as an argument to upload files using https://github.com/jaydenseric/graphql-multipart-request-spec"
scalar Upload
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")

"JSON-format data"
scalar JSON @scalar(class: "MLL\\GraphQLScalars\\JSON")

"""
Input type for creating a new user via the userCreate mutation
"""
input CreateUserInput @validator(class: "UserInputValidator") {
    "Display name. (optional)"
    name: String

    "Username. Must be unique. (required)"
    username: String!

    "Email address. Must be unique. (required)"
    email: String!

    "Password used to login to the application. (required)"
    password: String! @hash
}

"""
Input type for updating user information via the updateUser mutation
"""
input UpdateUserInput @validator(class: "UserInputValidator") {
    "User ID"
    id: ID!

    "Display name"
    name: String

    "Username of the user. Must be unique."
    username: String

    "Email address of the user. Must be unique."
    email: String

    "Password used to login to the application."
    password: String @hash

    "Metadata related to the profile of a user."
    profile_metadata: UpdateProfileMetadataInput
}

"""
Input type for resetting a password from a password reset request email
"""
input ResetPasswordInput @validator {
    email: String!
    password: String!
    token: String!
}

"""
Validate the availability of username and email via the validateNewUser query
"""
input ValidateNewUserInput @validator(class: "UserInputValidator") {
    "Username.  Validation error if not unique"
    username: String

    "Email. Validation error if not unique"
    email: String
}

"""
Input type for adding social media data to profile metadata
"""
input UpdateSocialMediaInput
    @validator(class: "ProfileMetadataSocialMediaValidator") {
    google: String
    twitter: String
    facebook: String
    instagram: String
    linkedin: String
}

input UpdateAcademicProfilesInput
    @validator(class: "ProfileMetadataAcademicProfilesValidator") {
    humanities_commons: String
    orcid_id: String
}

"""
Input type for adding profile metadata for a user
"""
input UpdateProfileMetadataInput @validator(class: "ProfileMetadataValidator") {
    social_media: UpdateSocialMediaInput
    academic_profiles: UpdateAcademicProfilesInput
    position_title: String
    specialization: String
    affiliation: String
    biography: String
    websites: [String]
}
