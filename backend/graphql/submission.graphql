#import submission.comments.graphql

extend type Query {
    "Return a submission by ID"
    submission(id: ID @eq): Submission @find @can(ability: "view", find: "id")

    "Return all submissions"
    submissions(
        status: [SubmissionStatus!] @scope(name: statusFilter)
        my_roles: [SubmissionUserRoles!] @scope(name: myRoleFilter)
        publication: [ID!] @scope(name: publicationFilter)
    ): [Submission!]
        @paginate(defaultCount: 100, scopes: ["visible"])
        @orderBy(column: "created_at", direction: DESC)
}

extend type Mutation {
    "Create a new submission under a publication"
    createSubmissionDraft(
        input: CreateSubmissionDraftInput! @spread
    ): Submission! @create @can(ability: "create", injectArgs: true)

    "Update an existing submission"
    updateSubmission(input: UpdateSubmissionInput! @spread): Submission!
        @update
        @can(ability: "update", find: "id")
        @argPolicy(
            find: "id"
            apply: [
                "submitters:updateSubmitters"
                "reviewers:updateReviewers"
                "reviewCoordinators:updateReviewCoordinators"
                "status:updateStatus"
                "title:updateTitle"
                "inlineComments:updateInlineComments"
                "overallComments:updateOverallComments"
            ]
            injectArgs: true
        )

    "Delete an inline comment of a submission"
    deleteInlineComment(input: DeleteCommentInput! @spread): Submission!
        @argPolicy(
            apply: ["comment_id:deleteInlineComment"]
            find: "submission_id"
            injectArgs: true
        )
        @field(resolver: "App\\GraphQL\\Mutations\\DeleteInlineComment@delete")

    "Delete an overall comment of a submission"
    deleteOverallComment(input: DeleteCommentInput! @spread): Submission!
        @argPolicy(
            apply: ["comment_id:deleteOverallComment"]
            find: "submission_id"
            injectArgs: true
        )
        @field(resolver: "App\\GraphQL\\Mutations\\DeleteOverallComment@delete")

    "Update the content of a submission"
    updateSubmissionContent(
        input: UpdateSubmissionContent! @spread
    ): Submission! @can(ability: "update", find: "id")

    "Update the content of a submission with a file upload"
    updateSubmissionContentWithFile(
        input: CreateSubmissionFileInput! @spread
    ): Submission!
        @can(ability: "update", find: "submission_id")
        @field(
            resolver: "App\\GraphQL\\Mutations\\UpdateSubmissionContentWithFile@update"
        )

    "Verify access to an invitation to a submission as the assigned role"
    verifySubmissionInvite(
        uuid: String!
        token: String!
        expires: String!
    ): User
        @field(
            resolver: "App\\GraphQL\\Mutations\\VerifySubmissionInvite@verify"
        )

    "Accept an invitation to a submission as the assigned role"
    acceptSubmissionInvite(
        uuid: String!
        token: String!
        expires: String!
        user: AcceptSubmissionInviteInput @spread
    ): User
        @field(
            resolver: "App\\GraphQL\\Mutations\\AcceptSubmissionInvite@accept"
        )

    """
    Create a staged user, assign them as a reviewer of a submisison,
    and send them an email notification inviting them to accept the assignment"
    """
    inviteReviewer(input: inviteSubmissionUserInput @spread): Submission
        @can(ability: "invite", find: "submission_id")
        @field(
            resolver: "App\\GraphQL\\Mutations\\InviteSubmissionUser@inviteReviewer"
        )

    """
    Create a staged user, assign them as a review coordinator of a submisison,
    and send them an email notification inviting them to accept the assignment
    """
    inviteReviewCoordinator(
        input: inviteSubmissionUserInput @spread
    ): Submission
        @can(ability: "invite", find: "submission_id")
        @field(
            resolver: "App\\GraphQL\\Mutations\\InviteSubmissionUser@inviteReviewCoordinator"
        )

    """
    Resend an email notification inviting a staged reviewer to accept the assignment
    """
    reinviteReviewer(input: reinviteSubmissionUserInput @spread): Submission
        @can(ability: "invite", find: "submission_id")
        @field(
            resolver: "App\\GraphQL\\Mutations\\ReinviteSubmissionUser@reinviteReviewer"
        )

    """
    Resend an email notification inviting a staged review coordinator to accept the assignment
    """
    reinviteReviewCoordinator(
        input: reinviteSubmissionUserInput @spread
    ): Submission
        @can(ability: "invite", find: "submission_id")
        @field(
            resolver: "App\\GraphQL\\Mutations\\ReinviteSubmissionUser@reinviteReviewCoordinator"
        )
}

input inviteSubmissionUserInput
    @validator(class: "SubmissionInvitationValidator") {
    submission_id: ID!
    email: String!
    message: String
}

input reinviteSubmissionUserInput
    @validator(class: "SubmissionReinvitationValidator") {
    submission_id: ID!
    email: String!
    message: String
}

"""
A Submission
"""
type Submission {
    id: ID!
    title: String
    created_at: DateTimeUtc!
    updated_at: DateTimeUtc
    created_by: User! @belongsTo(relation: "createdBy")
    updated_by: User! @belongsTo(relation: "updatedBy")
    submitted_at: DateTimeUtc
        @with(relation: "audits")
        @method(name: "getSubmittedAt")
    publication: Publication! @belongsTo
    users: [User!]! @belongsToMany
    reviewers: [User!]! @belongsToMany
    review_coordinators: [User!]! @belongsToMany(relation: "reviewCoordinators")
    submitters: [User!]! @belongsToMany
    files: [SubmissionFile]! @hasMany
    assignments: [SubmissionAssignment!]!
        @hasMany(relation: "submissionAssignments")
    status: SubmissionStatus!
    status_change_comment: String
    content: SubmissionContent #This field is optional bc it may be null if the pandoc process is still importing the document
    my_role: SubmissionUserRoles
        @with(relation: "submissionAssignments")
        @method(name: "getMyRole")
    effective_role: SubmissionUserRoles
        @with(relation: "submissionAssignments")
        @method(name: "getEffectiveRole")
    audits: [SubmissionAudit] @belongsToMany
}

"""
A user associated with a submission and a role
"""
type SubmissionAssignment {
    id: ID!
    role: SubmissionUserRoles! @rename(attribute: "role_id")
    user: User! @belongsTo
    submission: Submission! @belongsTo
    created_at: DateTimeUtc!
    updated_at: DateTimeUtc
}

"""
An uploaded file associated with a submission
"""
type SubmissionFile {
    id: ID!
    submission_id: ID!
    file_upload: String!
}

"""
The status of a submission
"""
enum SubmissionStatus {
    DRAFT @enum(value: 0)
    INITIALLY_SUBMITTED @enum(value: 1)
    RESUBMISSION_REQUESTED @enum(value: 2)
    RESUBMITTED @enum(value: 3)
    AWAITING_REVIEW @enum(value: 4)
    REJECTED @enum(value: 5)
    ACCEPTED_AS_FINAL @enum(value: 6)
    EXPIRED @enum(value: 7)
    UNDER_REVIEW @enum(value: 8)
    AWAITING_DECISION @enum(value: 9)
    REVISION_REQUESTED @enum(value: 10)
    ARCHIVED @enum(value: 11)
    DELETED @enum(value: 12)
}

input DeleteCommentInput {
    submission_id: ID!
    comment_id: ID!
}

"""
Input type for creating a new submission via the createSubmissionDraft mutation
"""
input CreateSubmissionDraftInput
    @validator(class: "SubmissionDraftInputValidator") {
    title: String! @trim
    publication_id: ID!
    submitters: CreateSubmissionUserInput
}

input AcceptSubmissionInviteInput
    @validator(class: "SubmissionInvitationAcceptanceValidator") {
    id: ID!
    name: String
    username: String!
    password: String!
}

input UpdateSubmissionInput @validator {
    id: ID!
    title: String @trim
    status: SubmissionStatus
    status_change_comment: String @trim
    reviewers: UpdateSubmissionUserInput
    review_coordinators: UpdateSubmissionUserInput
        @rename(attribute: "reviewCoordinators")
    submitters: UpdateSubmissionUserInput
}

input UpdateSubmissionContent @validator {
    id: ID!
    content: String!
}

input CreateSubmissionUserInput {
    connect: [ID!]!
}

input UpdateSubmissionUserInput {
    connect: [ID!]
    disconnect: [ID!]
}

"""
Input type for connecting newly created submissions to files via nested mutation
"""
input CreateSubmissionFilesHasMany {
    create: Upload!
}

"""
Input type for creating a new association between an uploaded file and a submission
"""
input CreateSubmissionFileInput
    @validator(class: "SubmissionFileInputValidator") {
    submission_id: ID!
    file_upload: Upload!
}

"""
The content of a submission
"""
type SubmissionContent {
    id: ID!
    data: String!
    created_at: DateTimeUtc!
    modified_at: DateTimeUtc!
    src_file: SubmissionFile!
}

enum SubmissionUserRoles {
    submitter @enum(value: 6)
    reviewer @enum(value: 5)
    review_coordinator @enum(value: 4)
}
