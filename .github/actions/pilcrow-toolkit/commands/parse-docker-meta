#!/bin/bash
if [[ "$POST_ENTRYPOINT" == "true" ]]; then
    if [[ -z "${STATE_frontendBundle}" ]]; then
        echo "No frontend bundle to upload."
        exit 0
    fi
    if [[ -z "${STATE_frontendImage}" ]]; then
        echo "No frontend image to upload."
        exit 0
    fi

    ARTIFACT_PATH="${STATE_frontendBundle}"
    ARTIFACT_PARENT="${STATE_frontendImage}"

    if [[ ! -r "${ARTIFACT_PATH}" ]]; then
        echo "Artifact path ${ARTIFACT_PATH} does not exist or is not readable."
        exit 1
    fi

    ORAS_ACTOR="${ORAS_ACTOR:-$GITHUB_ACTOR}"
    ORAS_TOKEN="${STATE_orasToken:-$GITHUB_TOKEN}"
    ARTIFACT_TYPE="${ARTIFACT_TYPE:-application/vnd.pilcrow.toolkit.bundle.v1+json}"

    docker manifest inspect "${ARTIFACT_PARENT}" > /dev/null 2>&1
    if [[ $? -ne 0 ]]; then
        echo "Artifact parent ${ARTIFACT_PARENT} does not exist in the registry."
        exit 0
    fi

    oras login --username "${ORAS_ACTOR}" --password "${ORAS_TOKEN}" ghcr.io
    oras attach "${ARTIFACT_PARENT}" \
        --disable-path-validation \
        --artifact-type ${ARTIFACT_TYPE} \
            "${ARTIFACT_PATH}"

    exit $?

fi

WEB_IMAGE="$(echo $DOCKER_METADATA | jq -r 'to_entries[] | select(.key|endswith("web")).value."image.name"')"

# Check if anything was written to the output cache directory during the bake command.
CACHE_OUTPUT=.output-cache
FRONTEND_BUNDLE="web-build/frontend-bundle.tar.gz"
BUNDLE_PATH="${CACHE_OUTPUT}/${FRONTEND_BUNDLE}"

if [[ -r "$BUNDLE_PATH" ]]; then
    echo "artifact found in cache: $FRONTEND_BUNDLE"
    echo "frontendImage=${WEB_IMAGE}"    >> "$GITHUB_STATE"
    echo "frontendBundle=${BUNDLE_PATH}" >> "$GITHUB_STATE"
    echo "frontend-bundle=${BUNDLE_PATH}" > "$GITHUB_OUTPUT"
fi

# Loop through any directories in CACHE_OUTPUT
