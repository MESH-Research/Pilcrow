import{a as s,c as t,b as c}from"./action-Bjp6SQtd.js";import*as m from"node:fs/promises";import{tmpdir as f}from"os";import{sep as n}from"path";import{a as d}from"./artifact-DmoH7EbE.js";import{c as l}from"./github-unh85YzM.js";import"crypto";import"fs";import"http";import"https";import"net";import"tls";import"events";import"assert";import"util";import"stream";import"buffer";import"querystring";import"stream/web";import"node:stream";import"node:util";import"node:events";import"worker_threads";import"perf_hooks";import"util/types";import"async_hooks";import"console";import"url";import"zlib";import"string_decoder";import"diagnostics_channel";import"child_process";import"timers";import"fs/promises";import"./once-DTkelibJ.js";import"constants";import"node:url";import"node:path";import"node:fs";import"node:string_decoder";import"punycode";const tt=s({pre:async function(){},post:async function(){if(t.isDebug()){const p=new d.DefaultArtifactClient,a=t.getState("bakeFiles");t.debug("Bake files: "+a);const e=a.split(/\s*/);t.debug("Uploading bake files as artifact...");const o=await m.mkdtemp(`${f()}${n}-bake-`);t.debug("Created temporary directory: "+o);for(const i of e)c(i,o).catch(r=>t.error(`Failed to copy bake file: ${i} (${r})`)).then(()=>t.debug("Copied bake file "+i));await p.uploadArtifact(`${l.job}-bake-files`,e,o).then(({size:i,id:r})=>t.debug(`Uploaded bake files as artifact, id: ${r}, size: ${i}`)).catch(i=>t.error("Failed to upload bake files as artifact: "+i)),t.debug("Cleaning up temporary directory: "+o),await m.rm(o,{recursive:!0,force:!0})}},main:async function(){t.debug("Saving bake file names to upload as artifacts..."),t.saveState("bakeFiles",t.getInput("bake-files"))}});export{tt as runCommand};
//# sourceMappingURL=pre-build-BQztFrjb.js.map
