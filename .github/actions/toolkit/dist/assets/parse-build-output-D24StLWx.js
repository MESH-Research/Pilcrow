import{c as t,a as l}from"./action-C_x4C55R.js";import*as p from"node:fs/promises";import{tmpdir as g}from"node:os";import{sep as h}from"path";import{g as n}from"./tools-Of4C9fXK.js";import{a as b}from"./artifact-DnnCtMpU.js";import{dirname as w}from"node:path";import"os";import"crypto";import"fs";import"http";import"https";import"net";import"tls";import"events";import"assert";import"util";import"stream";import"buffer";import"querystring";import"stream/web";import"node:stream";import"node:util";import"node:events";import"worker_threads";import"perf_hooks";import"util/types";import"async_hooks";import"console";import"url";import"zlib";import"string_decoder";import"diagnostics_channel";import"child_process";import"timers";import"fs/promises";import"./once-DQu3Y9Qz.js";import"constants";import"node:url";import"node:fs";import"node:string_decoder";import"punycode";var s={};function d(a){return{token:()=>t.getInput("token")??s.GITHUB_TOKEN,"oras-bundle-type":()=>t.getInput("oras-bundle-type")??"unknown/unknown","oras-actor":()=>t.getInput("oras-actor")??s.GITHUB_ACTOR,"output-cache-path":()=>t.getInput("output-cache-path")}[a]()}const dt=l({post:async function(){const a=t.getState("frontendBundle"),o=t.getState("frontendImage");if(!a||!o){t.info("No frontend bundle to attach.");return}t.info("Uploading frontend bundle as GHA artifact..."),await new b.DefaultArtifactClient().uploadArtifact("frontend-bundle",[a],w(a)).then(({size:r,id:f})=>{t.info(`Uploaded frontend bundle as artifact, id: ${f}, size: ${r}`)}).catch(r=>{t.error("Failed to create GHA artifact."),t.setFailed("Failed to upload frontend bundle as GHA artifact: "+r)});const c=d("oras-bundle-type"),i=d("oras-actor"),m=d("token");try{await n("docker",["manifest","inspect",o])}catch{t.info("Frontend image not found in registry: "+o);return}t.info("Attaching frontend bundle to image: "+o);const u=[];u.concat(i?["--username",i]:[]).concat(m?["--password",m]:[]),await n("oras",u).catch(r=>{throw t.error("Failed to login to registry."),t.setFailed("ORAS Failed to login to registry"),r}),await n("oras",["attach",o,"--disable-path-validation","--artifact-type",c,a]).catch(r=>{throw t.error("Failed to attach bundle to image."),t.setFailed("ORAS Failed to attach bundle to image"),r})},main:async function(){k(t.getInput("docker-metadata"));const a=d("output-cache-path");await y(a);const o=`${a}/web-build/frontend-bundle.tar.gz`;try{p.access(o,p.constants.R_OK)}catch{t.debug("No frontend bundle found at: "+o),t.info("No frontend bundle found.");return}t.saveState("frontendBundle",o),t.setOutput("frontend-bundle",o)}});function k(a){const o=JSON.parse(a).catch(i=>t.error("core.error parsing docker bake metadata: "+i));if(!o)return;const e=Object.keys(o).find(i=>i.endsWith("web")),c=e?o[e].image.name:null;t.saveState("frontendImage",c),t.saveState("webTarget",e)}async function y(a){const o=await p.mkdtemp(`${g()}${h}output-cache-`),e="./.github/actions/toolkit/Dockerfile.extract-cache",c=new Date().toISOString();await n("docker",["buildx","build","-f "+e,"--tag output:extract","--build-arg BUILDSTAMP="+c,"--load",o]),t.info("Building cache extractor image..."),await n("docker",["rm","-f","cache-container"]),t.info("Creating cache extractor..."),await n("docker",["create","-ti","--name cache-container","output:extract"]),t.info("Copying cache from extractor..."),await n("docker",["cp","-L","cache-container:/var/.output-cache",a])}export{dt as runCommand};
//# sourceMappingURL=parse-build-output-D24StLWx.js.map
