{"version":3,"file":"pre-build-C6T6xjtR.js","sources":["../../src/commands/pre-build.ts"],"sourcesContent":["import { runCommand } from \"/lib/action\";\nimport * as core from \"@actions/core\";\nimport * as fs from \"node:fs/promises\";\nimport { tmpdir } from \"os\";\nimport { sep } from \"path\";\nimport { DefaultArtifactClient } from \"@actions/artifact\";\nimport { cp } from \"@actions/io\";\nimport { context } from \"@actions/github\";\n\nexport { command as runCommand };\n\nconst command = runCommand({\n    pre: async function () {},\n    post: async function () {\n        if (core.isDebug()) {\n            const artifact = new DefaultArtifactClient();\n\n            const bakeFiles = core.getState(\"bakeFiles\");\n            core.debug(\"Bake files: \" + bakeFiles);\n            const files = bakeFiles.split(/\\s*/);\n            core.debug(\"Uploading bake files as artifact...\");\n            const tmpPath = await fs.mkdtemp(`${tmpdir()}${sep}-bake-`);\n            core.debug(\"Created temporary directory: \" + tmpPath);\n            for (const file of files) {\n                cp(file, tmpPath)\n                    .catch((reason) =>\n                        core.error(\n                            `Failed to copy bake file: ${file} (${reason})`,\n                        ),\n                    )\n                    .then(() => core.debug(\"Copied bake file \" + file));\n            }\n\n            await artifact\n                .uploadArtifact(`${context.job}-bake-files`, files, tmpPath)\n                .then(({ size, id }) =>\n                    core.debug(\n                        `Uploaded bake files as artifact, id: ${id}, size: ${size}`,\n                    ),\n                )\n                .catch((reason) =>\n                    core.error(\n                        \"Failed to upload bake files as artifact: \" + reason,\n                    ),\n                );\n            core.debug(\"Cleaning up temporary directory: \" + tmpPath);\n            await fs.rm(tmpPath, { recursive: true, force: true });\n        }\n    },\n    main: async function () {\n        core.debug(\"Saving bake file names to upload as artifacts...\");\n        core.saveState(\"bakeFiles\", core.getInput(\"bake-files\"));\n    },\n});\n"],"names":["command","runCommand","core.isDebug","artifact","DefaultArtifactClient","bakeFiles","core.getState","core.debug","files","tmpPath","fs","tmpdir","sep","file","cp","reason","core.error","context","size","id","core.saveState","core.getInput"],"mappings":"+0BAWA,MAAMA,GAAUC,EAAW,CACvB,IAAK,gBAAkB,CAAA,EACvB,KAAM,gBAAkB,CACpB,GAAIC,EAAAA,UAAgB,CAChB,MAAMC,EAAW,IAAIC,wBAEfC,EAAYC,EAAAA,SAAc,WAAW,EAC3CC,EAAAA,MAAW,eAAiBF,CAAS,EACrC,MAAMG,EAAQH,EAAU,MAAM,KAAK,EACnCE,EAAAA,MAAW,qCAAqC,EAChD,MAAME,EAAU,MAAMC,EAAG,QAAQ,GAAGC,GAAQ,GAAGC,CAAG,QAAQ,EAC1DL,EAAAA,MAAW,gCAAkCE,CAAO,EACpD,UAAWI,KAAQL,EACfM,EAAGD,EAAMJ,CAAO,EACX,MAAOM,GACJC,EAAAA,MACI,6BAA6BH,CAAI,KAAKE,CAAM,GAAA,CAChD,EAEH,KAAK,IAAMR,EAAAA,MAAW,oBAAsBM,CAAI,CAAC,EAG1D,MAAMV,EACD,eAAe,GAAGc,EAAQ,GAAG,cAAeT,EAAOC,CAAO,EAC1D,KAAK,CAAC,CAAE,KAAAS,EAAM,GAAAC,CAAA,IACXZ,EAAAA,MACI,wCAAwCY,CAAE,WAAWD,CAAI,EAAA,CAC7D,EAEH,MAAOH,GACJC,EAAAA,MACI,4CAA8CD,CAAA,CAClD,EAERR,EAAAA,MAAW,oCAAsCE,CAAO,EACxD,MAAMC,EAAG,GAAGD,EAAS,CAAE,UAAW,GAAM,MAAO,GAAM,CAAA,CACzD,EAEJ,KAAM,gBAAkB,CACpBF,EAAAA,MAAW,kDAAkD,EAC7Da,EAAAA,UAAe,YAAaC,WAAc,YAAY,CAAC,CAAA,CAE/D,CAAC"}