name: Build
description: "Builds the Docker images for Pilcrow"
inputs:
    target:
        description: "package to build"
        required: false
        default: "default"
    token:
        description: "GitHub token to use for authentication"
outputs:
    version:
        description: "Version of the package that was built"
        value: ${{ steps.docker-meta-fpm.outputs.version }}
    tags:
        description: "List of tags"
        value: ${{ steps.docker-meta-fpm.outputs.tags}}
runs:
    using: "composite"
    steps:
        - name: Checkout code
          uses: actions/checkout@v3
          with:
              fetch-depth: 0
        - name: Set version strings
          id: tagger
          shell: bash
          run: |
              VERSION=$(git describe --tags)
              VERSION_URL=https://github.com/MESH-Research/Pilcrow/commits/${GITHUB_SHA}
              VERSION_DATE=$(git show -s --format=%cI ${GITHUB_SHA})
              echo "VERSION=${VERSION}" >> "$GITHUB_ENV"
              echo "VERSION_URL=${VERSION_URL}" >> "$GITHUB_ENV"
              echo "VERSION_DATE=${VERSION_DATE}" >> "$GITHUB_ENV"
              echo "REPO=${GITHUB_REPOSITORY,,}" >> "$GITHUB_ENV"
              sed -i "s|env('VERSION', '')|env('VERSION', '${VERSION}')|" backend/config/app.php
              sed -i "s|env('VERSION_URL', '')|env('VERSION_URL', '${VERSION_URL}')|" backend/config/app.php
              sed -i "s|env('VERSION_DATE', '')|env('VERSION_DATE', '${VERSION_DATE}')|" backend/config/app.php
              sed -i "s|process.env.VERSION_DATE|'${VERSION_DATE}'|" client/src/components/AppFooter.vue
              sed -i "s|process.env.VERSION_URL|'${VERSION_URL}'|" client/src/components/AppFooter.vue
              sed -i "s|process.env.VERSION|'${VERSION}'|" client/src/components/AppFooter.vue
        - uses: docker/setup-buildx-action@v3
        - name: Docker meta (FPM)
          id: docker-meta-fpm
          uses: docker/metadata-action@v5
          with:
              images: |
                  ghcr.io/${{ github.repository }}/${{ (inputs.target == 'default' && 'cache/') || ''}}fpm
              tags: |
                  type=edge
                  type=semver,pattern={{version}}
                  type=semver,pattern={{major}}.{{minor}}
                  type=sha,enable=${{ inputs.target == 'default'}}
              bake-target: fpm
        - name: Docker meta (WEB)
          id: docker-meta-web
          uses: docker/metadata-action@v5
          with:
              images: |
                  ghcr.io/${{ env.REPO }}/${{ (inputs.target == 'default' && 'cache/') || ''}}web
              tags: |
                  type=edge
                  type=semver,pattern={{version}}
                  type=semver,pattern={{major}}.{{minor}}
                  type=sha,enable=${{ inputs.target == 'default'}}
              bake-target: web
        - uses: int128/docker-build-cache-config-action@v1
          id: cache-web
          with:
              image: ghcr.io/${{ env.REPO }}/cache/web
        - uses: int128/docker-build-cache-config-action@v1
          id: cache-fpm
          with:
              image: ghcr.io/${{ env.REPO }}/cache/fpm
        - name: Build and push
          id: docker-bake
          uses: docker/bake-action@v6.8.0
          if: ${{ steps.docker-meta-fpm.outputs.tags != ''}}
          env:
              FPM_CACHE_FROM: ${{ steps.cache-fpm.outputs.cache-from }}
              FPM_CACHE_TO: ${{ steps.cache-fpm.outputs.cache-to }}
              WEB_CACHE_FROM: ${{ steps.cache-web.outputs.cache-from }}
              WEB_CACHE_TO: ${{ steps.cache-web.outputs.cache-to }}
          with:
              source: .
              targets: ${{ inputs.target }}
              allow: fs.write=*
              files: |
                  ./docker-bake.hcl
                  ${{ steps.docker-meta-fpm.outputs.bake-file }}
                  ${{ steps.docker-meta-web.outputs.bake-file }}
        - name: Get image from metadata
          shell: bash
          run: |
              touch metadata.json
              echo '${{ steps.docker-bake.outputs.metadata }}' > metadata.json
              image=$(cat metadata.json | jq -r '.fpm."image.name"')
              echo IMAGE_NAME=$image >> "$GITHUB_OUTPUT"
        - name: tgz Frontend Assets
          shell: bash
          run: |
              tar -czf frontend-bundle.tar.gz \
                -C /tmp/webbuild/var/www/html .
        - name: Upload Frontend Assets
          uses: actions/upload-artifact@v4
          with:
              name: frontend-bundle
              path: /tmp/webbuild/var/www/html/
        - name: Publish Frontend Bundle
          uses: oras-project/setup-oras@v1
        - shell: bash
          env:
              OWNER: ${{ github.repository_owner }}
          run: |
              echo ${{ inputs.token }} | oras login --username wreality --password-stdin ghcr.io
              oras attach ${{ env.IMAGE_NAME }} \
                --artifact-type application/vnd.mesh.frontend-bundle.v1+tar \
                frontend-bundle.tar.gz
