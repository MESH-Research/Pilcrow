name: Build
description: "Builds the Docker images for Pilcrow"
inputs:
  target:
    description: "package to build"
    required: false
    default: "ci"
  token:
    description: "GitHub token to use for authentication"
  push:
    description: "Push the built images to the registry"
    required: false
    default: "true"
outputs:
  version:
    description: "Version of the package that was built"
    value: ${{ steps.docker-meta.outputs.version }}
  web_image:
    description: "Web image name that was built"
    value: ${{ env.WEB_IMAGE }}
  fpm_image:
    description: "FPM image name that was built"
    value: ${{ env.FPM_IMAGE }}
  tags:
    description: "List of tags"
    value: ${{ steps.docker-meta.outputs.tags}}
  frontend_bundle:
    description: "Path to the frontend bundle"
    value: ${{ steps.frontend-bundle.outputs.bundle_file }}

runs:
  using: "composite"
  steps:
    - uses: ./.github/actions/pilcrow-toolkit
      id: setup
      with:
        target: ${{ inputs.target }}
        command: setup
    - uses: docker/setup-buildx-action@v3
      id: buildx
    # - name: Cache
    #   uses: actions/cache@v3
    #   id: docker-yarn-cache
    #   with:
    #     path: |
    #       ${RUNNER_TEMP}/yarn-cache
    #     key: cache-yarn-${{ hashFiles('client/package.json', 'client/yarn.lock') }}
    #     restore-keys: |
    #       cache-yarn-
    # - name: inject cache into docker
    #   uses: reproducible-containers/buildkit-cache-dance@v3.1.0
    #   with:
    #     cache-map: |
    #       {
    #         "${RUNNER_TEMP}/yarn-cache": "/usr/local/share/.cache/yarn/v6"
    #       }
    #     skip-extraction: ${{ steps.docker-yarn-cache.outputs.cache-hit }}
    - name: Docker Meta
      id: docker-input-metadata
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.setup.outputs.image-template }}
        tags: |
          type=edge
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,enable=${{ inputs.target == 'ci'}}
    - uses: int128/docker-build-cache-config-action@v1
      id: docker-registry-cache
      with:
        image: ${{ steps.setup.outputs.docker-registry-cache }}
    - name: Consolidate Docker Bake Files
      shell: bash
      id: cp-bake-files
      if: ${{ runner.debug == 1}}
      run: |
        BAKEDIR=${RUNNER_TEMP}/pilcrow-bake
        echo "path=${BAKEDIR}/" >> "$GITHUB_OUTPUT"
        mkdir -p $BAKEDIR
        cp ./docker-bake.hcl \
        ${{ steps.docker-registry-cache.outputs.bake-file }} \
        ${{ steps.docker-input-metadata.outputs.bake-file }} \
        $BAKEDIR
    - name: Upload Docker Bake Files
      uses: actions/upload-artifact@v4
      if: ${{ runner.debug == 1 }}
      with:
        name: docker-bake-src-${{ inputs.target }}
        path: ${{ steps.cp-bake-files.outputs.path }}
    - name: Execute Docker Bake
      id: docker-bake
      uses: docker/bake-action@v6.8.0
      env:
        PUSH: ${{ inputs.push }}
        BUILDSTAMP: ${{ steps.setup.outputs.buildstamp }}
        VERSION: ${{ steps.setup.outputs.version }}
        VERSION_URL: ${{ steps.setup.outputs.version-url }}
        VERSION_DATE: ${{ steps.setup.outputs.version-date }}
      with:
        source: .
        targets: ${{ inputs.target }}
        allow: fs.write=*
        files: |
          ./docker-bake.hcl
          ${{ steps.docker-input-metadata.outputs.bake-file }}
          ${{ steps.docker-registry-cache.outputs.bake-file }}
    - shell: bash
      run: |
        mkdir -p /tmp/docker-cache
        date --iso=ns > /tmp/docker-cache/buildstamp
        docker buildx build -f ./.github/Dockerfile.cache-exporter --tag output:extract --load /tmp/docker-cache
        echo "Creating Cache Extractor"
        docker rm -f cache-container && docker create -ti --name cache-container output:extract
        echo "Copying Cache from Extractor"
        docker cp -L cache-container:/var/.output-cache ./

    - uses: actions/upload-artifact@v4
      if: ${{ runner.debug == 1 }}
      with:
        name: docker-metadata-${{ inputs.target }}
        path: metadata-output.json
    - name: Parse Docker Metadata Output
      id: parse-docker-meta
      uses: ./.github/actions/pilcrow-toolkit
      with:
        command: parse-docker-meta
        docker-metadata: ${{ steps.docker-bake.outputs.metadata }}
    - name: Upload Frontend Bundle as Github Artifact
      uses: actions/upload-artifact@v4
      if: ${{ steps.parse-docker-meta.outputs.frontend-bundle }}
      with:
        name: frontend-bundle
        path: ${{ steps.parse-docker-meta.outputs.frontend-bundle }}
        if-no-files-found: warn
